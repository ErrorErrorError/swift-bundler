import Foundation
import Parsing
import Version

struct ProjectConfiguration: Codable {
  /// The name of the default project generated by Swift Bundler.
  static let defaultProjectName = "default"

  var source: Source
  var builder: Builder
  var products: [String: Product]

  enum Error: LocalizedError {
    case invalidGitURL(String)

    var errorDescription: String? {
      switch self {
        case .invalidGitURL(let url):
          return "'\(url)' is not a valid URL"
      }
    }
  }

  struct Flat {
    var source: Source
    var builder: Builder.Flat
    var products: [String: Product]
  }

  enum Source {
    case git(URL)
  }

  struct Builder: Codable {
    var name: String
    var type: BuilderType
    var apiSource: APISource?
    var api: APIRequirement?

    enum CodingKeys: String, CodingKey {
      case name
      case type
      case apiSource = "api_source"
      case api = "api"
    }

    struct Flat {
      var name: String
      var type: BuilderType
      var api: API

      enum API {
        case local(_ path: String)
        case git(URL?, requirement: APIRequirement)
      }
    }

    enum APIRequirement: Codable {
      case revision(String)

      init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let value = try container.decode(String.self)
        let parser = OneOf {
          Parse {
            "revision("
            PrefixUpTo(")")
            ")"
          }.map { revision in
            APIRequirement.revision(String(revision))
          }
        }
        self = try parser.parse(value)
      }

      func encode(to encoder: any Encoder) throws {
        let value: String
        switch self {
          case .revision(let revision):
            value = "revision(\(revision))"
        }
        var container = encoder.singleValueContainer()
        try container.encode(value)
      }
    }

    enum APISource: Codable {
      case git(URL)
      case local(String)

      init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let value = try container.decode(String.self)
        let parser = OneOf {
          Parse {
            "git("
            PrefixUpTo(")")
            ")"
          }
          .map { (url: Substring) -> Result<APISource, Error> in
            guard let url = URL(string: String(url)) else {
              return .failure(Error.invalidGitURL(String(url)))
            }
            return .success(APISource.git(url))
          }

          Parse {
            "local("
            PrefixUpTo(")")
            ")"
          }.map { path in
            Result<_, Error>.success(APISource.local(String(path)))
          }
        }
        self = try parser.parse(value).unwrap()
      }

      func encode(to encoder: any Encoder) throws {
        let value: String
        switch self {
          case .git(let url):
            value = "git(\(url.absoluteString))"
          case .local(let path):
            value = "local(\(path))"
        }
        var container = encoder.singleValueContainer()
        try container.encode(value)
      }
    }

    enum BuilderType: String, Codable {
      case wholeProject
    }
  }

  struct Product: Codable {
    var type: ProductType
    var outputDirectory: String?

    enum CodingKeys: String, CodingKey {
      case type
      case outputDirectory = "output_directory"
    }

    enum ProductType: String, Codable {
      case dynamicLibrary
      case staticLibrary
      case executable
    }

    func path(whenNamed name: String, platform: Platform) -> String {
      let baseName =
        switch type {
          case .dynamicLibrary, .staticLibrary:
            // Uses a switch statement so that alarms are raised when Windows gets added
            switch platform {
              case .linux, .macOS, .iOS, .iOSSimulator, .tvOS, .tvOSSimulator, .visionOS,
                .visionOSSimulator:
                "lib\(name)"
            }
          case .executable:
            name
        }
      let fileExtension =
        switch type {
          case .dynamicLibrary:
            switch platform {
              case .linux:
                ".so"
              case .macOS, .iOS, .iOSSimulator, .tvOS, .tvOSSimulator, .visionOS,
                .visionOSSimulator:
                ".dylib"
            }
          case .staticLibrary:
            ".a"
          case .executable:
            ""
        }
      let fileName = "\(baseName)\(fileExtension)"
      if let outputDirectory = outputDirectory {
        return "\(outputDirectory)/\(fileName)"
      } else {
        return fileName
      }
    }
  }
}

extension ProjectConfiguration.Source: Codable {
  init(from decoder: any Decoder) throws {
    let parser = Parse {
      "git("
      PrefixUpTo(")")
      ")"
    }.map { url in
      URL(string: String(url)).map(Self.git)
    }

    let container = try decoder.singleValueContainer()
    let value = try container.decode(String.self)

    guard let parsedValue = try parser.parse(value) else {
      throw ProjectConfiguration.Error.invalidGitURL(value)
    }

    self = parsedValue
  }

  func encode(to encoder: any Encoder) throws {
    var container = encoder.singleValueContainer()
    let value =
      switch self {
        case .git(let url):
          "git(\(url.absoluteString))"
      }
    try container.encode(value)
  }
}
